{"ast":null,"code":"// src/utils/calculations.js\n\nexport const calculateMetrics = transactions => {\n  const currentMonth = new Date().getMonth();\n  const currentYear = new Date().getFullYear();\n  const currentMonthTransactions = transactions.filter(t => {\n    const transactionDate = new Date(t.date);\n    return transactionDate.getMonth() === currentMonth && transactionDate.getFullYear() === currentYear;\n  });\n  const income = currentMonthTransactions.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);\n  const expenses = Math.abs(currentMonthTransactions.filter(t => t.amount < 0).reduce((sum, t) => sum + t.amount, 0));\n  const balance = transactions.reduce((sum, t) => sum + t.amount, 0);\n\n  // Calculate percentage changes (mock data for demo)\n  const incomeChange = 24;\n  const expenseChange = -12;\n  return {\n    balance,\n    income,\n    expenses,\n    incomeChange,\n    expenseChange\n  };\n};\nexport const getCategoryInfo = (categories, categoryId) => {\n  return categories.find(cat => cat.id === categoryId) || {\n    name: 'Other',\n    icon: '❓',\n    color: 'bg-gray-100',\n    type: 'expense'\n  };\n};\nexport const filterTransactions = (transactions, searchTerm, filterCategory, categories) => {\n  return transactions.filter(transaction => {\n    const matchesSearch = transaction.name.toLowerCase().includes(searchTerm.toLowerCase()) || transaction.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const categoryInfo = getCategoryInfo(categories, transaction.categoryId);\n    const matchesCategory = filterCategory === 'all' || categoryInfo.type === filterCategory || transaction.categoryId.toString() === filterCategory;\n    return matchesSearch && matchesCategory;\n  }).sort((a, b) => new Date(b.date) - new Date(a.date));\n};\nexport const calculateCategorySpending = (transactions, categories) => {\n  const expenseCategories = categories.filter(cat => cat.type === 'expense');\n  const totalExpenses = Math.abs(transactions.filter(t => t.amount < 0).reduce((sum, t) => sum + t.amount, 0));\n  return expenseCategories.map(category => {\n    const categoryTransactions = transactions.filter(t => t.categoryId === category.id && t.amount < 0);\n    const categoryTotal = Math.abs(categoryTransactions.reduce((sum, t) => sum + t.amount, 0));\n    const percentage = totalExpenses > 0 ? categoryTotal / totalExpenses * 100 : 0;\n    return {\n      ...category,\n      total: categoryTotal,\n      percentage: percentage.toFixed(1),\n      transactionCount: categoryTransactions.length\n    };\n  }).filter(cat => cat.total > 0).sort((a, b) => b.total - a.total);\n};","map":{"version":3,"names":["calculateMetrics","transactions","currentMonth","Date","getMonth","currentYear","getFullYear","currentMonthTransactions","filter","t","transactionDate","date","income","amount","reduce","sum","expenses","Math","abs","balance","incomeChange","expenseChange","getCategoryInfo","categories","categoryId","find","cat","id","name","icon","color","type","filterTransactions","searchTerm","filterCategory","transaction","matchesSearch","toLowerCase","includes","description","categoryInfo","matchesCategory","toString","sort","a","b","calculateCategorySpending","expenseCategories","totalExpenses","map","category","categoryTransactions","categoryTotal","percentage","total","toFixed","transactionCount","length"],"sources":["C:/Users/sarat/OneDrive/Desktop/Xpenses/src/utils/calculations_js.js"],"sourcesContent":["// src/utils/calculations.js\n\nexport const calculateMetrics = (transactions) => {\n  const currentMonth = new Date().getMonth();\n  const currentYear = new Date().getFullYear();\n  \n  const currentMonthTransactions = transactions.filter(t => {\n    const transactionDate = new Date(t.date);\n    return transactionDate.getMonth() === currentMonth && transactionDate.getFullYear() === currentYear;\n  });\n\n  const income = currentMonthTransactions.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);\n  const expenses = Math.abs(currentMonthTransactions.filter(t => t.amount < 0).reduce((sum, t) => sum + t.amount, 0));\n  const balance = transactions.reduce((sum, t) => sum + t.amount, 0);\n\n  // Calculate percentage changes (mock data for demo)\n  const incomeChange = 24;\n  const expenseChange = -12;\n\n  return { balance, income, expenses, incomeChange, expenseChange };\n};\n\nexport const getCategoryInfo = (categories, categoryId) => {\n  return categories.find(cat => cat.id === categoryId) || { \n    name: 'Other', \n    icon: '❓', \n    color: 'bg-gray-100',\n    type: 'expense' \n  };\n};\n\nexport const filterTransactions = (transactions, searchTerm, filterCategory, categories) => {\n  return transactions.filter(transaction => {\n    const matchesSearch = transaction.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         transaction.description.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const categoryInfo = getCategoryInfo(categories, transaction.categoryId);\n    const matchesCategory = filterCategory === 'all' || \n                           categoryInfo.type === filterCategory ||\n                           transaction.categoryId.toString() === filterCategory;\n    \n    return matchesSearch && matchesCategory;\n  }).sort((a, b) => new Date(b.date) - new Date(a.date));\n};\n\nexport const calculateCategorySpending = (transactions, categories) => {\n  const expenseCategories = categories.filter(cat => cat.type === 'expense');\n  const totalExpenses = Math.abs(transactions.filter(t => t.amount < 0).reduce((sum, t) => sum + t.amount, 0));\n  \n  return expenseCategories.map(category => {\n    const categoryTransactions = transactions.filter(t => t.categoryId === category.id && t.amount < 0);\n    const categoryTotal = Math.abs(categoryTransactions.reduce((sum, t) => sum + t.amount, 0));\n    const percentage = totalExpenses > 0 ? (categoryTotal / totalExpenses * 100) : 0;\n    \n    return {\n      ...category,\n      total: categoryTotal,\n      percentage: percentage.toFixed(1),\n      transactionCount: categoryTransactions.length\n    };\n  }).filter(cat => cat.total > 0).sort((a, b) => b.total - a.total);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}