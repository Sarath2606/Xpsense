{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useTransactions.js\nimport { useState, useEffect } from 'react';\nimport { CATEGORIES } from '../utils/constants_js';\nimport { loadTransactions, saveTransactions } from '../utils/storage_js';\nimport { calculateMetrics, filterTransactions, getCategoryInfo } from '../utils/calculations_js';\nexport const useTransactions = (searchTerm = '', filterCategory = 'all') => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const categories = CATEGORIES;\n\n  // Load transactions on mount\n  useEffect(() => {\n    const savedTransactions = loadTransactions();\n    setTransactions(savedTransactions);\n  }, []);\n\n  // Save transactions whenever they change\n  useEffect(() => {\n    if (transactions.length > 0) {\n      saveTransactions(transactions);\n    }\n  }, [transactions]);\n\n  // Add new transaction\n  const addTransaction = transactionData => {\n    const category = getCategoryInfo(categories, parseInt(transactionData.categoryId));\n    const amount = parseFloat(transactionData.amount);\n    const finalAmount = category.type === 'expense' ? -Math.abs(amount) : Math.abs(amount);\n    const newTransaction = {\n      id: Date.now(),\n      name: transactionData.name,\n      amount: finalAmount,\n      categoryId: parseInt(transactionData.categoryId),\n      date: transactionData.date,\n      description: transactionData.description\n    };\n    setTransactions(prev => [...prev, newTransaction]);\n  };\n\n  // Update existing transaction\n  const updateTransaction = (id, transactionData) => {\n    const category = getCategoryInfo(categories, parseInt(transactionData.categoryId));\n    const amount = parseFloat(transactionData.amount);\n    const finalAmount = category.type === 'expense' ? -Math.abs(amount) : Math.abs(amount);\n    const updatedTransaction = {\n      id,\n      name: transactionData.name,\n      amount: finalAmount,\n      categoryId: parseInt(transactionData.categoryId),\n      date: transactionData.date,\n      description: transactionData.description\n    };\n    setTransactions(prev => prev.map(t => t.id === id ? updatedTransaction : t));\n  };\n\n  // Delete transaction\n  const deleteTransaction = id => {\n    setTransactions(prev => prev.filter(t => t.id !== id));\n  };\n\n  // Get filtered transactions\n  const filteredTransactions = filterTransactions(transactions, searchTerm, filterCategory, categories);\n\n  // Calculate metrics\n  const metrics = calculateMetrics(transactions);\n  return {\n    transactions,\n    categories,\n    filteredTransactions,\n    metrics,\n    addTransaction,\n    updateTransaction,\n    deleteTransaction\n  };\n};\n_s(useTransactions, \"ljI9AK1pijMrkaFpGNLK2JFQakI=\");","map":{"version":3,"names":["useState","useEffect","CATEGORIES","loadTransactions","saveTransactions","calculateMetrics","filterTransactions","getCategoryInfo","useTransactions","searchTerm","filterCategory","_s","transactions","setTransactions","categories","savedTransactions","length","addTransaction","transactionData","category","parseInt","categoryId","amount","parseFloat","finalAmount","type","Math","abs","newTransaction","id","Date","now","name","date","description","prev","updateTransaction","updatedTransaction","map","t","deleteTransaction","filter","filteredTransactions","metrics"],"sources":["C:/Users/sarat/OneDrive/Desktop/Xpenses/src/hooks/use_transactions_hook.js"],"sourcesContent":["// src/hooks/useTransactions.js\nimport { useState, useEffect } from 'react';\nimport { CATEGORIES } from '../utils/constants_js';\nimport { loadTransactions, saveTransactions } from '../utils/storage_js';\nimport { calculateMetrics, filterTransactions, getCategoryInfo } from '../utils/calculations_js';\n\nexport const useTransactions = (searchTerm = '', filterCategory = 'all') => {\n  const [transactions, setTransactions] = useState([]);\n  const categories = CATEGORIES;\n\n  // Load transactions on mount\n  useEffect(() => {\n    const savedTransactions = loadTransactions();\n    setTransactions(savedTransactions);\n  }, []);\n\n  // Save transactions whenever they change\n  useEffect(() => {\n    if (transactions.length > 0) {\n      saveTransactions(transactions);\n    }\n  }, [transactions]);\n\n  // Add new transaction\n  const addTransaction = (transactionData) => {\n    const category = getCategoryInfo(categories, parseInt(transactionData.categoryId));\n    const amount = parseFloat(transactionData.amount);\n    const finalAmount = category.type === 'expense' ? -Math.abs(amount) : Math.abs(amount);\n\n    const newTransaction = {\n      id: Date.now(),\n      name: transactionData.name,\n      amount: finalAmount,\n      categoryId: parseInt(transactionData.categoryId),\n      date: transactionData.date,\n      description: transactionData.description\n    };\n\n    setTransactions(prev => [...prev, newTransaction]);\n  };\n\n  // Update existing transaction\n  const updateTransaction = (id, transactionData) => {\n    const category = getCategoryInfo(categories, parseInt(transactionData.categoryId));\n    const amount = parseFloat(transactionData.amount);\n    const finalAmount = category.type === 'expense' ? -Math.abs(amount) : Math.abs(amount);\n\n    const updatedTransaction = {\n      id,\n      name: transactionData.name,\n      amount: finalAmount,\n      categoryId: parseInt(transactionData.categoryId),\n      date: transactionData.date,\n      description: transactionData.description\n    };\n\n    setTransactions(prev => \n      prev.map(t => t.id === id ? updatedTransaction : t)\n    );\n  };\n\n  // Delete transaction\n  const deleteTransaction = (id) => {\n    setTransactions(prev => prev.filter(t => t.id !== id));\n  };\n\n  // Get filtered transactions\n  const filteredTransactions = filterTransactions(transactions, searchTerm, filterCategory, categories);\n\n  // Calculate metrics\n  const metrics = calculateMetrics(transactions);\n\n  return {\n    transactions,\n    categories,\n    filteredTransactions,\n    metrics,\n    addTransaction,\n    updateTransaction,\n    deleteTransaction\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}