{"ast":null,"code":"// src/hooks/useTransactions.js\nimport{useState,useEffect}from'react';import{CATEGORIES}from'../utils/constants_js';import{loadTransactions,saveTransactions}from'../utils/storage_js';import{calculateMetrics,filterTransactions,getCategoryInfo}from'../utils/calculations_js';export const useTransactions=function(){let searchTerm=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';let filterCategory=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'all';const[transactions,setTransactions]=useState([]);const categories=CATEGORIES;// Load transactions on mount\nuseEffect(()=>{const savedTransactions=loadTransactions();setTransactions(savedTransactions);},[]);// Save transactions whenever they change\nuseEffect(()=>{if(transactions.length>0){saveTransactions(transactions);}},[transactions]);// Add new transaction\nconst addTransaction=transactionData=>{const category=getCategoryInfo(categories,parseInt(transactionData.categoryId));const amount=parseFloat(transactionData.amount);const finalAmount=category.type==='expense'?-Math.abs(amount):Math.abs(amount);const newTransaction={id:Date.now(),name:transactionData.name,amount:finalAmount,categoryId:parseInt(transactionData.categoryId),date:transactionData.date,description:transactionData.description};setTransactions(prev=>[...prev,newTransaction]);};// Update existing transaction\nconst updateTransaction=(id,transactionData)=>{const category=getCategoryInfo(categories,parseInt(transactionData.categoryId));const amount=parseFloat(transactionData.amount);const finalAmount=category.type==='expense'?-Math.abs(amount):Math.abs(amount);const updatedTransaction={id,name:transactionData.name,amount:finalAmount,categoryId:parseInt(transactionData.categoryId),date:transactionData.date,description:transactionData.description};setTransactions(prev=>prev.map(t=>t.id===id?updatedTransaction:t));};// Delete transaction\nconst deleteTransaction=id=>{setTransactions(prev=>prev.filter(t=>t.id!==id));};// Get filtered transactions\nconst filteredTransactions=filterTransactions(transactions,searchTerm,filterCategory,categories);// Calculate metrics\nconst metrics=calculateMetrics(transactions);return{transactions,categories,filteredTransactions,metrics,addTransaction,updateTransaction,deleteTransaction};};","map":{"version":3,"names":["useState","useEffect","CATEGORIES","loadTransactions","saveTransactions","calculateMetrics","filterTransactions","getCategoryInfo","useTransactions","searchTerm","arguments","length","undefined","filterCategory","transactions","setTransactions","categories","savedTransactions","addTransaction","transactionData","category","parseInt","categoryId","amount","parseFloat","finalAmount","type","Math","abs","newTransaction","id","Date","now","name","date","description","prev","updateTransaction","updatedTransaction","map","t","deleteTransaction","filter","filteredTransactions","metrics"],"sources":["C:/Users/sarat/OneDrive/Desktop/Xpenses/src/hooks/use_transactions_hook.js"],"sourcesContent":["// src/hooks/useTransactions.js\nimport { useState, useEffect } from 'react';\nimport { CATEGORIES } from '../utils/constants_js';\nimport { loadTransactions, saveTransactions } from '../utils/storage_js';\nimport { calculateMetrics, filterTransactions, getCategoryInfo } from '../utils/calculations_js';\n\nexport const useTransactions = (searchTerm = '', filterCategory = 'all') => {\n  const [transactions, setTransactions] = useState([]);\n  const categories = CATEGORIES;\n\n  // Load transactions on mount\n  useEffect(() => {\n    const savedTransactions = loadTransactions();\n    setTransactions(savedTransactions);\n  }, []);\n\n  // Save transactions whenever they change\n  useEffect(() => {\n    if (transactions.length > 0) {\n      saveTransactions(transactions);\n    }\n  }, [transactions]);\n\n  // Add new transaction\n  const addTransaction = (transactionData) => {\n    const category = getCategoryInfo(categories, parseInt(transactionData.categoryId));\n    const amount = parseFloat(transactionData.amount);\n    const finalAmount = category.type === 'expense' ? -Math.abs(amount) : Math.abs(amount);\n\n    const newTransaction = {\n      id: Date.now(),\n      name: transactionData.name,\n      amount: finalAmount,\n      categoryId: parseInt(transactionData.categoryId),\n      date: transactionData.date,\n      description: transactionData.description\n    };\n\n    setTransactions(prev => [...prev, newTransaction]);\n  };\n\n  // Update existing transaction\n  const updateTransaction = (id, transactionData) => {\n    const category = getCategoryInfo(categories, parseInt(transactionData.categoryId));\n    const amount = parseFloat(transactionData.amount);\n    const finalAmount = category.type === 'expense' ? -Math.abs(amount) : Math.abs(amount);\n\n    const updatedTransaction = {\n      id,\n      name: transactionData.name,\n      amount: finalAmount,\n      categoryId: parseInt(transactionData.categoryId),\n      date: transactionData.date,\n      description: transactionData.description\n    };\n\n    setTransactions(prev => \n      prev.map(t => t.id === id ? updatedTransaction : t)\n    );\n  };\n\n  // Delete transaction\n  const deleteTransaction = (id) => {\n    setTransactions(prev => prev.filter(t => t.id !== id));\n  };\n\n  // Get filtered transactions\n  const filteredTransactions = filterTransactions(transactions, searchTerm, filterCategory, categories);\n\n  // Calculate metrics\n  const metrics = calculateMetrics(transactions);\n\n  return {\n    transactions,\n    categories,\n    filteredTransactions,\n    metrics,\n    addTransaction,\n    updateTransaction,\n    deleteTransaction\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}